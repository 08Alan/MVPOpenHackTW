'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

exports.default = getSaga;

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _effects = require('redux-saga/effects');

var sagaEffects = _interopRequireWildcard(_effects);

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _sagaHelpers = require('redux-saga/lib/internal/sagaHelpers');

var _constants = require('./constants');

var _prefixType = require('./prefixType');

var _prefixType2 = _interopRequireDefault(_prefixType);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getSaga(resolve, reject, effects, model, onError, onEffect) {
  return (/*#__PURE__*/_regenerator2.default.mark(function _callee3() {
      var _this = this;

      var key;
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.t0 = _regenerator2.default.keys(effects);

            case 1:
              if ((_context3.t1 = _context3.t0()).done) {
                _context3.next = 7;
                break;
              }

              key = _context3.t1.value;

              if (!Object.prototype.hasOwnProperty.call(effects, key)) {
                _context3.next = 5;
                break;
              }

              return _context3.delegateYield( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var watcher, task;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        watcher = getWatcher(resolve, reject, key, effects[key], model, onError, onEffect);
                        _context2.next = 3;
                        return sagaEffects.fork(watcher);

                      case 3:
                        task = _context2.sent;
                        _context2.next = 6;
                        return sagaEffects.fork( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                          return _regenerator2.default.wrap(function _callee$(_context) {
                            while (1) {
                              switch (_context.prev = _context.next) {
                                case 0:
                                  _context.next = 2;
                                  return sagaEffects.take(model.namespace + '/@@CANCEL_EFFECTS');

                                case 2:
                                  _context.next = 4;
                                  return sagaEffects.cancel(task);

                                case 4:
                                case 'end':
                                  return _context.stop();
                              }
                            }
                          }, _callee, this);
                        }));

                      case 6:
                      case 'end':
                        return _context2.stop();
                    }
                  }
                }, _callee2, _this);
              })(), 't2', 5);

            case 5:
              _context3.next = 1;
              break;

            case 7:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    })
  );
}

function getWatcher(resolve, reject, key, _effect, model, onError, onEffect) {
  var _marked = /*#__PURE__*/_regenerator2.default.mark(sagaWithCatch);

  var effect = _effect;
  var type = 'takeEvery';
  var ms = void 0;

  if (Array.isArray(_effect)) {
    effect = _effect[0];
    var opts = _effect[1];
    if (opts && opts.type) {
      type = opts.type;
      if (type === 'throttle') {
        (0, _invariant2.default)(opts.ms, 'app.start: opts.ms should be defined if type is throttle');
        ms = opts.ms;
      }
    }
    (0, _invariant2.default)(['watcher', 'takeEvery', 'takeLatest', 'throttle'].indexOf(type) > -1, 'app.start: effect type should be takeEvery, takeLatest, throttle or watcher');
  }

  function sagaWithCatch() {
    var _len,
        args,
        _key,
        ret,
        _args4 = arguments;

    return _regenerator2.default.wrap(function sagaWithCatch$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return sagaEffects.put({ type: '' + key + _constants.NAMESPACE_SEP + '@@start' });

          case 3:
            for (_len = _args4.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = _args4[_key];
            }

            _context4.next = 6;
            return effect.apply(undefined, (0, _toConsumableArray3.default)(args.concat(createEffects(model))));

          case 6:
            ret = _context4.sent;
            _context4.next = 9;
            return sagaEffects.put({ type: '' + key + _constants.NAMESPACE_SEP + '@@end' });

          case 9:
            resolve(key, ret);
            _context4.next = 16;
            break;

          case 12:
            _context4.prev = 12;
            _context4.t0 = _context4['catch'](0);

            onError(_context4.t0);
            if (!_context4.t0._dontReject) {
              reject(key, _context4.t0);
            }

          case 16:
          case 'end':
            return _context4.stop();
        }
      }
    }, _marked, this, [[0, 12]]);
  }

  var sagaWithOnEffect = applyOnEffect(onEffect, sagaWithCatch, model, key);

  switch (type) {
    case 'watcher':
      return sagaWithCatch;
    case 'takeLatest':
      return (/*#__PURE__*/_regenerator2.default.mark(function _callee4() {
          return _regenerator2.default.wrap(function _callee4$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return (0, _sagaHelpers.takeLatestHelper)(key, sagaWithOnEffect);

                case 2:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _callee4, this);
        })
      );
    case 'throttle':
      return (/*#__PURE__*/_regenerator2.default.mark(function _callee5() {
          return _regenerator2.default.wrap(function _callee5$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return (0, _sagaHelpers.throttleHelper)(ms, key, sagaWithOnEffect);

                case 2:
                case 'end':
                  return _context6.stop();
              }
            }
          }, _callee5, this);
        })
      );
    default:
      return (/*#__PURE__*/_regenerator2.default.mark(function _callee6() {
          return _regenerator2.default.wrap(function _callee6$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return (0, _sagaHelpers.takeEveryHelper)(key, sagaWithOnEffect);

                case 2:
                case 'end':
                  return _context7.stop();
              }
            }
          }, _callee6, this);
        })
      );
  }
}

function createEffects(model) {
  function assertAction(type, name) {
    (0, _invariant2.default)(type, 'dispatch: action should be a plain Object with type');
    (0, _warning2.default)(type.indexOf('' + model.namespace + _constants.NAMESPACE_SEP) !== 0, '[' + name + '] ' + type + ' should not be prefixed with namespace ' + model.namespace);
  }
  function put(action) {
    var type = action.type;

    assertAction(type, 'sagaEffects.put');
    return sagaEffects.put((0, _extends3.default)({}, action, { type: (0, _prefixType2.default)(type, model) }));
  }
  function take(type) {
    if (typeof type === 'string') {
      assertAction(type, 'sagaEffects.take');
      return sagaEffects.take((0, _prefixType2.default)(type, model));
    } else {
      return sagaEffects.take(type);
    }
  }
  return (0, _extends3.default)({}, sagaEffects, { put: put, take: take });
}

function applyOnEffect(fns, effect, model, key) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(fns), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var fn = _step.value;

      effect = fn(effect, sagaEffects, model, key);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return effect;
}
module.exports = exports['default'];