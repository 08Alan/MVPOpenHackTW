'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.default = createPromiseMiddleware;

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createPromiseMiddleware(app) {
  var map = {};

  var middleware = function middleware() {
    return function (next) {
      return function (action) {
        var type = action.type;

        if (isEffect(type)) {
          return new _promise2.default(function (resolve, reject) {
            map[type] = {
              resolve: wrapped.bind(null, type, resolve),
              reject: wrapped.bind(null, type, reject)
            };
          });
        } else {
          return next(action);
        }
      };
    };
  };

  function isEffect(type) {
    var _type$split = type.split(_constants.NAMESPACE_SEP),
        _type$split2 = (0, _slicedToArray3.default)(_type$split, 1),
        namespace = _type$split2[0];

    var model = app._models.filter(function (m) {
      return m.namespace === namespace;
    })[0];
    if (model) {
      if (model.effects && model.effects[type]) {
        return true;
      }
    }

    return false;
  }

  function wrapped(type, fn, args) {
    if (map[type]) delete map[type];
    fn(args);
  }

  function resolve(type, args) {
    if (map[type]) {
      map[type].resolve(args);
    }
  }

  function reject(type, args) {
    if (map[type]) {
      map[type].reject(args);
    }
  }

  return {
    middleware: middleware,
    resolve: resolve,
    reject: reject
  };
}
module.exports = exports['default'];