'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _g = require('g2');

var _g2 = _interopRequireDefault(_g);

var _equal = require('../equal');

var _equal2 = _interopRequireDefault(_equal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Shape = _g2.default.Shape;


var primaryColor = '#2F9CFF';
var backgroundColor = '#F0F2F5';

/* eslint no-underscore-dangle: 0 */

var Gauge = function (_PureComponent) {
  _inherits(Gauge, _PureComponent);

  function Gauge() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Gauge);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Gauge.__proto__ || Object.getPrototypeOf(Gauge)).call.apply(_ref, [this].concat(args))), _this), _this.handleRef = function (n) {
      _this.node = n;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Gauge, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      setTimeout(function () {
        _this2.renderChart();
      }, 10);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this3 = this;

      if (!(0, _equal2.default)(this.props, nextProps)) {
        setTimeout(function () {
          _this3.renderChart(nextProps);
        }, 10);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.chart) {
        this.chart.destroy();
      }
    }
  }, {
    key: 'initChart',
    value: function initChart(nextProps) {
      var _ref2 = nextProps || this.props,
          title = _ref2.title,
          _ref2$color = _ref2.color,
          color = _ref2$color === undefined ? primaryColor : _ref2$color;

      Shape.registShape('point', 'dashBoard', {
        drawShape: function drawShape(cfg, group) {
          var originPoint = cfg.points[0];
          var point = this.parsePoint({ x: originPoint.x, y: 0.4 });

          var center = this.parsePoint({
            x: 0,
            y: 0
          });

          var shape = group.addShape('polygon', {
            attrs: {
              points: [[center.x, center.y], [point.x + 8, point.y], [point.x + 8, point.y - 2], [center.x, center.y - 2]],
              radius: 2,
              lineWidth: 2,
              arrow: false,
              fill: color
            }
          });

          group.addShape('Marker', {
            attrs: {
              symbol: 'circle',
              lineWidth: 2,
              fill: color,
              radius: 8,
              x: center.x,
              y: center.y
            }
          });
          group.addShape('Marker', {
            attrs: {
              symbol: 'circle',
              lineWidth: 2,
              fill: '#fff',
              radius: 5,
              x: center.x,
              y: center.y
            }
          });

          var origin = cfg.origin;

          group.addShape('text', {
            attrs: {
              x: center.x,
              y: center.y + 80,
              text: origin._origin.value + '%',
              textAlign: 'center',
              fontSize: 24,
              fill: 'rgba(0, 0, 0, 0.85)'
            }
          });
          group.addShape('text', {
            attrs: {
              x: center.x,
              y: center.y + 45,
              text: title,
              textAlign: 'center',
              fontSize: 14,
              fill: 'rgba(0, 0, 0, 0.43)'
            }
          });

          return shape;
        }
      });
    }
  }, {
    key: 'renderChart',
    value: function renderChart(nextProps) {
      var _ref3 = nextProps || this.props,
          height = _ref3.height,
          _ref3$color = _ref3.color,
          color = _ref3$color === undefined ? primaryColor : _ref3$color,
          _ref3$bgColor = _ref3.bgColor,
          bgColor = _ref3$bgColor === undefined ? backgroundColor : _ref3$bgColor,
          title = _ref3.title,
          percent = _ref3.percent,
          format = _ref3.format;

      var data = [{ name: title, value: percent }];

      if (this.chart) {
        this.chart.clear();
      }
      if (this.node) {
        this.node.innerHTML = '';
      }

      this.initChart(nextProps);

      var chart = new _g2.default.Chart({
        container: this.node,
        forceFit: true,
        height: height,
        animate: false,
        plotCfg: {
          margin: [10, 10, 30, 10]
        }
      });

      chart.source(data);

      chart.tooltip(false);

      chart.coord('gauge', {
        startAngle: -1.2 * Math.PI,
        endAngle: 0.20 * Math.PI
      });
      chart.col('value', {
        type: 'linear',
        nice: true,
        min: 0,
        max: 100,
        tickCount: 6
      });
      chart.axis('value', {
        subTick: false,
        tickLine: {
          stroke: color,
          lineWidth: 2,
          value: -14
        },
        labelOffset: -12,
        formatter: format
      });
      chart.point().position('value').shape('dashBoard');
      draw(data);

      /* eslint no-shadow: 0 */
      function draw(data) {
        var val = data[0].value;
        var lineWidth = 12;
        chart.guide().clear();

        chart.guide().arc(function () {
          return [0, 0.95];
        }, function () {
          return [val, 0.95];
        }, {
          stroke: color,
          lineWidth: lineWidth
        });

        chart.guide().arc(function () {
          return [val, 0.95];
        }, function (arg) {
          return [arg.max, 0.95];
        }, {
          stroke: bgColor,
          lineWidth: lineWidth
        });

        chart.changeData(data);
      }

      this.chart = chart;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', { ref: this.handleRef });
    }
  }]);

  return Gauge;
}(_react.PureComponent);

exports.default = Gauge;
module.exports = exports['default'];