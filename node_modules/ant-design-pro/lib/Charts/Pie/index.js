'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _desc, _value, _class, _descriptor;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _g = require('g2');

var _g2 = _interopRequireDefault(_g);

var _antd = require('antd');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactFittext = require('react-fittext');

var _reactFittext2 = _interopRequireDefault(_reactFittext);

var _debounce = require('lodash-decorators/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _equal = require('../equal');

var _equal2 = _interopRequireDefault(_equal);

var _index = require('./index.less');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

/* eslint react/no-danger:0 */
var Pie = (_dec = (0, _debounce2.default)(200), (_class = function (_Component) {
  _inherits(Pie, _Component);

  function Pie() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Pie);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Pie.__proto__ || Object.getPrototypeOf(Pie)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      legendData: [],
      legendBlock: true
    }, _initDefineProp(_this, 'resize', _descriptor, _this), _this.handleRef = function (n) {
      _this.node = n;
    }, _this.handleRoot = function (n) {
      _this.root = n;
    }, _this.handleLegendClick = function (item, i) {
      var newItem = item;
      newItem.checked = !newItem.checked;

      var legendData = _this.state.legendData;

      legendData[i] = newItem;

      if (_this.chart) {
        var filterItem = legendData.filter(function (l) {
          return l.checked;
        }).map(function (l) {
          return l.x;
        });
        _this.chart.filter('x', filterItem);
        _this.chart.repaint();
      }

      _this.setState({
        legendData: legendData
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Pie, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.renderChart();
      this.resize();
      window.addEventListener('resize', this.resize);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _equal2.default)(this.props, nextProps)) {
        this.renderChart(nextProps.data);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.resize);
      if (this.chart) {
        this.chart.destroy();
      }
    }
  }, {
    key: 'renderChart',
    value: function renderChart(d) {
      var data = d || this.props.data;

      var _props = this.props,
          _props$height = _props.height,
          height = _props$height === undefined ? 0 : _props$height,
          hasLegend = _props.hasLegend,
          _props$fit = _props.fit,
          fit = _props$fit === undefined ? true : _props$fit,
          _props$margin = _props.margin,
          margin = _props$margin === undefined ? [12, 0, 12, 0] : _props$margin,
          percent = _props.percent,
          color = _props.color,
          _props$inner = _props.inner,
          inner = _props$inner === undefined ? 0.75 : _props$inner,
          _props$animate = _props.animate,
          animate = _props$animate === undefined ? true : _props$animate,
          colors = _props.colors,
          _props$lineWidth = _props.lineWidth,
          lineWidth = _props$lineWidth === undefined ? 0 : _props$lineWidth;


      var defaultColors = colors;

      var selected = this.props.selected || true;
      var tooltip = this.props.tooltips || true;

      var formatColor = void 0;
      if (percent) {
        selected = false;
        tooltip = false;
        formatColor = function formatColor(value) {
          if (value === '占比') {
            return color || 'rgba(24, 144, 255, 0.85)';
          } else {
            return '#F0F2F5';
          }
        };

        /* eslint no-param-reassign: */
        data = [{
          x: '占比',
          y: parseFloat(percent)
        }, {
          x: '反比',
          y: 100 - parseFloat(percent)
        }];
      }

      if (!data || data && data.length < 1) {
        return;
      }

      // clean
      this.node.innerHTML = '';

      var Stat = _g2.default.Stat;


      var chart = new _g2.default.Chart({
        container: this.node,
        forceFit: fit,
        height: height,
        plotCfg: {
          margin: margin
        },
        animate: animate
      });

      if (!tooltip) {
        chart.tooltip(false);
      } else {
        chart.tooltip({
          title: null
        });
      }

      chart.axis(false);
      chart.legend(false);

      chart.source(data, {
        x: {
          type: 'cat',
          range: [0, 1]
        },
        y: {
          min: 0
        }
      });

      chart.coord('theta', {
        inner: inner
      });

      chart.intervalStack().position(Stat.summary.percent('y')).style({ lineWidth: lineWidth, stroke: '#fff' }).color('x', percent ? formatColor : defaultColors).selected(selected);

      chart.render();

      this.chart = chart;

      var legendData = [];
      if (hasLegend) {
        var geom = chart.getGeoms()[0]; // 获取所有的图形
        var items = geom.getData(); // 获取图形对应的数据
        legendData = items.map(function (item) {
          /* eslint no-underscore-dangle:0 */
          var origin = item._origin;
          origin.color = item.color;
          origin.checked = true;
          return origin;
        });
      }

      this.setState({
        legendData: legendData
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames,
          _this2 = this;

      var _props2 = this.props,
          valueFormat = _props2.valueFormat,
          subTitle = _props2.subTitle,
          total = _props2.total,
          hasLegend = _props2.hasLegend,
          className = _props2.className,
          style = _props2.style;
      var _state = this.state,
          legendData = _state.legendData,
          legendBlock = _state.legendBlock;

      var pieClassName = (0, _classnames2.default)(_index2.default.pie, className, (_classNames = {}, _defineProperty(_classNames, _index2.default.hasLegend, !!hasLegend), _defineProperty(_classNames, _index2.default.legendBlock, legendBlock), _classNames));

      return _react2.default.createElement(
        'div',
        { ref: this.handleRoot, className: pieClassName, style: style },
        _react2.default.createElement(
          _reactFittext2.default,
          { maxFontSize: 25 },
          _react2.default.createElement(
            'div',
            { className: _index2.default.chart },
            _react2.default.createElement('div', { ref: this.handleRef, style: { fontSize: 0 } }),
            (subTitle || total) && _react2.default.createElement(
              'div',
              { className: _index2.default.total },
              subTitle && _react2.default.createElement(
                'h4',
                { className: 'pie-sub-title' },
                subTitle
              ),

              // eslint-disable-next-line
              total && _react2.default.createElement('p', { className: 'pie-stat', dangerouslySetInnerHTML: { __html: total } })
            )
          )
        ),
        hasLegend && _react2.default.createElement(
          'ul',
          { className: _index2.default.legend },
          legendData.map(function (item, i) {
            return _react2.default.createElement(
              'li',
              { key: item.x, onClick: function onClick() {
                  return _this2.handleLegendClick(item, i);
                } },
              _react2.default.createElement('span', { className: _index2.default.dot, style: { backgroundColor: !item.checked ? '#aaa' : item.color } }),
              _react2.default.createElement(
                'span',
                { className: _index2.default.legendTitle },
                item.x
              ),
              _react2.default.createElement(_antd.Divider, { type: 'vertical' }),
              _react2.default.createElement(
                'span',
                { className: _index2.default.percent },
                (item['..percent'] * 100).toFixed(2) + '%'
              ),
              _react2.default.createElement('span', {
                className: _index2.default.value,
                dangerouslySetInnerHTML: {
                  __html: valueFormat ? valueFormat(item.y) : item.y
                }
              })
            );
          })
        )
      );
    }
  }]);

  return Pie;
}(_react.Component), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'resize', [_dec], {
  enumerable: true,
  initializer: function initializer() {
    var _this3 = this;

    return function () {
      var hasLegend = _this3.props.hasLegend;

      if (!hasLegend || !_this3.root) {
        window.removeEventListener('resize', _this3.resize);
        return;
      }
      // antd xs size
      if (_this3.root.parentNode.clientWidth <= 480) {
        if (!_this3.state.legendBlock) {
          _this3.setState({
            legendBlock: true
          }, function () {
            _this3.renderChart();
          });
        }
      } else if (_this3.state.legendBlock) {
        _this3.setState({
          legendBlock: false
        }, function () {
          _this3.renderChart();
        });
      }
    };
  }
})), _class));
exports.default = Pie;
module.exports = exports['default'];