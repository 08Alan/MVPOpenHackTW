'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _desc, _value, _class, _descriptor;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _g = require('g2');

var _g2 = _interopRequireDefault(_g);

var _gCloud = require('g-cloud');

var _gCloud2 = _interopRequireDefault(_gCloud);

var _debounce = require('lodash-decorators/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _index = require('./index.less');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

/* eslint no-underscore-dangle: 0 */
/* eslint no-param-reassign: 0 */

var imgUrl = 'https://gw.alipayobjects.com/zos/rmsportal/gWyeGLCdFFRavBGIDzWk.png';

var TagCloud = (_dec = (0, _debounce2.default)(500), (_class = function (_PureComponent) {
  _inherits(TagCloud, _PureComponent);

  function TagCloud() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TagCloud);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TagCloud.__proto__ || Object.getPrototypeOf(TagCloud)).call.apply(_ref, [this].concat(args))), _this), _this.resize = function () {
      _this.renderChart();
    }, _this.initTagCloud = function () {
      var Util = _g2.default.Util,
          Shape = _g2.default.Shape;


      function getTextAttrs(cfg) {
        var textAttrs = Util.mix(true, {}, {
          fillOpacity: cfg.opacity,
          fontSize: cfg.size,
          rotate: cfg.origin._origin.rotate,
          // rotate: cfg.origin._origin.rotate,
          text: cfg.origin._origin.text,
          textAlign: 'center',
          fill: cfg.color,
          textBaseline: 'Alphabetic'
        }, cfg.style);
        return textAttrs;
      }

      // 给point注册一个词云的shape
      Shape.registShape('point', 'cloud', {
        drawShape: function drawShape(cfg, container) {
          cfg.points = this.parsePoints(cfg.points);
          var attrs = getTextAttrs(cfg);
          var shape = container.addShape('text', {
            attrs: Util.mix(attrs, {
              x: cfg.points[0].x,
              y: cfg.points[0].y
            })
          });
          return shape;
        }
      });
    }, _this.saveRootRef = function (node) {
      _this.root = node;
    }, _this.saveNodeRef = function (node) {
      _this.node = node;
    }, _initDefineProp(_this, 'renderChart', _descriptor, _this), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TagCloud, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.initTagCloud();
      this.renderChart();

      window.addEventListener('resize', this.resize);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.data !== nextProps.data) {
        this.renderChart(nextProps.data);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.resize);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)(_index2.default.tagCloud, this.props.className),
          ref: this.saveRootRef,
          style: { width: '100%' }
        },
        _react2.default.createElement('div', { ref: this.saveNodeRef, style: { height: this.props.height } })
      );
    }
  }]);

  return TagCloud;
}(_react.PureComponent), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'renderChart', [_dec], {
  enumerable: true,
  initializer: function initializer() {
    var _this2 = this;

    return function (newData) {
      var data = newData || _this2.props.data;
      if (!data || data.length < 1) {
        return;
      }

      var colors = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#9AE65C'];

      var height = _this2.props.height * 4;
      var width = 0;
      if (_this2.root) {
        width = _this2.root.offsetWidth * 4;
      }

      data.sort(function (a, b) {
        return b.value - a.value;
      });

      var max = data[0].value;
      var min = data[data.length - 1].value;

      // 构造一个词云布局对象
      var layout = new _gCloud2.default({
        words: data,
        width: width,
        height: height,

        rotate: function rotate() {
          return 0;
        },

        // 设定文字大小配置函数(默认为12-24px的随机大小)
        size: function size(words) {
          return (words.value - min) / (max - min) * 50 + 30;
        },

        // 设定文字内容
        text: function text(words) {
          return words.name;
        }
      });

      layout.image(imgUrl, function (imageCloud) {
        // clean
        if (_this2.node) {
          _this2.node.innerHTML = '';
        }

        // 执行词云布局函数，并在回调函数中调用G2对结果进行绘制
        imageCloud.exec(function (texts) {
          var chart = new _g2.default.Chart({
            container: _this2.node,
            width: width,
            height: height,
            plotCfg: {
              margin: 0
            }
          });

          chart.legend(false);
          chart.axis(false);
          chart.tooltip(false);

          chart.source(texts);

          // 将词云坐标系调整为G2的坐标系
          chart.coord().reflect();

          chart.point().position('x*y').color('text', colors).size('size', function (size) {
            return size;
          }).shape('cloud').style({
            fontStyle: texts[0].style,
            fontFamily: texts[0].font,
            fontWeight: texts[0].weight
          });

          chart.render();
        });
      });
    };
  }
})), _class));
exports.default = TagCloud;
module.exports = exports['default'];