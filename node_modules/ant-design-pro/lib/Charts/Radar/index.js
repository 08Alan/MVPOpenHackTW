'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _g = require('g2');

var _g2 = _interopRequireDefault(_g);

var _antd = require('antd');

var _equal = require('../equal');

var _equal2 = _interopRequireDefault(_equal);

var _index = require('./index.less');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint react/no-danger:0 */
var Radar = function (_PureComponent) {
  _inherits(Radar, _PureComponent);

  function Radar() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Radar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Radar.__proto__ || Object.getPrototypeOf(Radar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      legendData: []
    }, _this.handleRef = function (n) {
      _this.node = n;
    }, _this.handleLegendClick = function (item, i) {
      var newItem = item;
      newItem.checked = !newItem.checked;

      var legendData = _this.state.legendData;

      legendData[i] = newItem;

      if (_this.chart) {
        var filterItem = legendData.filter(function (l) {
          return l.checked;
        }).map(function (l) {
          return l.name;
        });
        _this.chart.filter('name', filterItem);
        _this.chart.repaint();
      }

      _this.setState({
        legendData: legendData
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Radar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.renderChart(this.props.data);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _equal2.default)(this.props, nextProps)) {
        this.renderChart(nextProps.data);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.chart) {
        this.chart.destroy();
      }
    }
  }, {
    key: 'renderChart',
    value: function renderChart(data) {
      var _props = this.props,
          _props$height = _props.height,
          height = _props$height === undefined ? 0 : _props$height,
          _props$hasLegend = _props.hasLegend,
          hasLegend = _props$hasLegend === undefined ? true : _props$hasLegend,
          _props$fit = _props.fit,
          fit = _props$fit === undefined ? true : _props$fit,
          _props$tickCount = _props.tickCount,
          tickCount = _props$tickCount === undefined ? 4 : _props$tickCount,
          _props$margin = _props.margin,
          margin = _props$margin === undefined ? [24, 30, 16, 30] : _props$margin;


      var colors = ['#1890FF', '#FACC14', '#2FC25B', '#8543E0', '#F04864', '#13C2C2', '#fa8c16', '#a0d911'];

      if (!data || data && data.length < 1) {
        return;
      }

      // clean
      this.node.innerHTML = '';

      var chart = new _g2.default.Chart({
        container: this.node,
        forceFit: fit,
        height: height - (hasLegend ? 80 : 22),
        plotCfg: {
          margin: margin
        }
      });

      this.chart = chart;

      chart.source(data, {
        value: {
          min: 0,
          tickCount: tickCount
        }
      });

      chart.coord('polar');
      chart.legend(false);

      chart.axis('label', {
        line: null,
        labelOffset: 8,
        labels: {
          label: {
            fill: 'rgba(0, 0, 0, .65)'
          }
        },
        grid: {
          line: {
            stroke: '#e9e9e9',
            lineWidth: 1,
            lineDash: [0, 0]
          }
        }
      });

      chart.axis('value', {
        grid: {
          type: 'polygon',
          line: {
            stroke: '#e9e9e9',
            lineWidth: 1,
            lineDash: [0, 0]
          }
        },
        labels: {
          label: {
            fill: 'rgba(0, 0, 0, .65)'
          }
        }
      });

      chart.line().position('label*value').color('name', colors);
      chart.point().position('label*value').color('name', colors).shape('circle').size(3);

      chart.render();

      if (hasLegend) {
        var geom = chart.getGeoms()[0]; // 获取所有的图形
        var items = geom.getData(); // 获取图形对应的数据
        var legendData = items.map(function (item) {
          /* eslint no-underscore-dangle:0 */
          var origin = item._origin;
          var result = {
            name: origin[0].name,
            color: item.color,
            checked: true,
            value: origin.reduce(function (p, n) {
              return p + n.value;
            }, 0)
          };

          return result;
        });

        this.setState({
          legendData: legendData
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          height = _props2.height,
          title = _props2.title,
          hasLegend = _props2.hasLegend;
      var legendData = this.state.legendData;


      return _react2.default.createElement(
        'div',
        { className: _index2.default.radar, style: { height: height } },
        _react2.default.createElement(
          'div',
          null,
          title && _react2.default.createElement(
            'h4',
            null,
            title
          ),
          _react2.default.createElement('div', { ref: this.handleRef }),
          hasLegend && _react2.default.createElement(
            _antd.Row,
            { className: _index2.default.legend },
            legendData.map(function (item, i) {
              return _react2.default.createElement(
                _antd.Col,
                {
                  span: 24 / legendData.length,
                  key: item.name,
                  onClick: function onClick() {
                    return _this2.handleLegendClick(item, i);
                  }
                },
                _react2.default.createElement(
                  'div',
                  { className: _index2.default.legendItem },
                  _react2.default.createElement(
                    'p',
                    null,
                    _react2.default.createElement('span', { className: _index2.default.dot, style: { backgroundColor: !item.checked ? '#aaa' : item.color } }),
                    _react2.default.createElement(
                      'span',
                      null,
                      item.name
                    )
                  ),
                  _react2.default.createElement(
                    'h6',
                    null,
                    item.value
                  )
                )
              );
            })
          )
        )
      );
    }
  }]);

  return Radar;
}(_react.PureComponent);

exports.default = Radar;
module.exports = exports['default'];