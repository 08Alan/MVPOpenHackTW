'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _g = require('g2');

var _g2 = _interopRequireDefault(_g);

var _g2PluginSlider = require('g2-plugin-slider');

var _g2PluginSlider2 = _interopRequireDefault(_g2PluginSlider);

var _index = require('./index.less');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TimelineChart = function (_Component) {
  _inherits(TimelineChart, _Component);

  function TimelineChart() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TimelineChart);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TimelineChart.__proto__ || Object.getPrototypeOf(TimelineChart)).call.apply(_ref, [this].concat(args))), _this), _this.sliderId = 'timeline-chart-slider-' + Math.random() * 1000, _this.handleRef = function (n) {
      _this.node = n;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TimelineChart, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.renderChart(this.props.data);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.data !== this.props.data) {
        this.renderChart(nextProps.data);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.chart) {
        this.chart.destroy();
      }
      if (this.slider) {
        this.slider.destroy();
      }
    }
  }, {
    key: 'renderChart',
    value: function renderChart(data) {
      var _props = this.props,
          _props$height = _props.height,
          height = _props$height === undefined ? 400 : _props$height,
          _props$margin = _props.margin,
          margin = _props$margin === undefined ? [60, 20, 40, 40] : _props$margin,
          titleMap = _props.titleMap,
          _props$borderWidth = _props.borderWidth,
          borderWidth = _props$borderWidth === undefined ? 2 : _props$borderWidth;


      if (!data || data && data.length < 1) {
        return;
      }

      // clean
      if (this.sliderId) {
        document.getElementById(this.sliderId).innerHTML = '';
      }
      this.node.innerHTML = '';

      var chart = new _g2.default.Chart({
        container: this.node,
        forceFit: true,
        height: height,
        plotCfg: {
          margin: margin
        }
      });

      chart.axis('x', {
        title: false
      });
      chart.axis('y1', {
        title: false
      });
      chart.axis('y2', false);

      chart.legend({
        mode: false,
        position: 'top'
      });

      chart.source(data, {
        x: {
          type: 'timeCat',
          tickCount: 16,
          mask: 'HH:MM',
          range: [0, 1]
        },
        y1: {
          alias: titleMap.y1,
          min: 0
        },
        y2: {
          alias: titleMap.y2,
          min: 0
        }
      });

      chart.line().position('x*y1').color('#1890FF').size(borderWidth);
      chart.line().position('x*y2').color('#2FC25B').size(borderWidth);

      this.chart = chart;

      /* eslint new-cap:0 */
      var slider = new _g2PluginSlider2.default({
        domId: this.sliderId,
        height: 26,
        xDim: 'x',
        yDim: 'y1',
        charts: [chart]
      });
      slider.render();

      this.slider = slider;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          height = _props2.height,
          title = _props2.title;


      return _react2.default.createElement(
        'div',
        { className: _index2.default.timelineChart, style: { height: height } },
        _react2.default.createElement(
          'div',
          null,
          title && _react2.default.createElement(
            'h4',
            null,
            title
          ),
          _react2.default.createElement('div', { ref: this.handleRef }),
          _react2.default.createElement('div', { id: this.sliderId })
        )
      );
    }
  }]);

  return TimelineChart;
}(_react.Component);

exports.default = TimelineChart;
module.exports = exports['default'];