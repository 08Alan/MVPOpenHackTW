'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _g = require('g2');

var _g2 = _interopRequireDefault(_g);

var _equal = require('../equal');

var _equal2 = _interopRequireDefault(_equal);

var _index = require('../index.less');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MiniBar = function (_PureComponent) {
  _inherits(MiniBar, _PureComponent);

  function MiniBar() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, MiniBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MiniBar.__proto__ || Object.getPrototypeOf(MiniBar)).call.apply(_ref, [this].concat(args))), _this), _this.handleRef = function (n) {
      _this.node = n;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(MiniBar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.renderChart(this.props.data);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _equal2.default)(this.props, nextProps)) {
        this.renderChart(nextProps.data);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.chart) {
        this.chart.destroy();
      }
    }
  }, {
    key: 'renderChart',
    value: function renderChart(data) {
      var _props = this.props,
          _props$height = _props.height,
          height = _props$height === undefined ? 0 : _props$height,
          _props$fit = _props.fit,
          fit = _props$fit === undefined ? true : _props$fit,
          _props$color = _props.color,
          color = _props$color === undefined ? '#1890FF' : _props$color;


      if (!data || data && data.length < 1) {
        return;
      }

      // clean
      this.node.innerHTML = '';

      var Frame = _g2.default.Frame;

      var frame = new Frame(data);

      var chart = new _g2.default.Chart({
        container: this.node,
        forceFit: fit,
        height: height + 54,
        plotCfg: {
          margin: [36, 5, 30, 5]
        },
        legend: null
      });

      chart.axis(false);

      chart.source(frame, {
        x: {
          type: 'cat'
        },
        y: {
          min: 0
        }
      });

      chart.tooltip({
        title: null,
        crosshairs: false,
        map: {
          name: 'x'
        }
      });
      chart.interval().position('x*y').color(color);
      chart.render();

      this.chart = chart;
    }
  }, {
    key: 'render',
    value: function render() {
      var height = this.props.height;


      return _react2.default.createElement(
        'div',
        { className: _index2.default.miniChart, style: { height: height } },
        _react2.default.createElement(
          'div',
          { className: _index2.default.chartContent },
          _react2.default.createElement('div', { ref: this.handleRef })
        )
      );
    }
  }]);

  return MiniBar;
}(_react.PureComponent);

exports.default = MiniBar;
module.exports = exports['default'];